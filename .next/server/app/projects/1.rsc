1:HL["/Personal-Website/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
2:HL["/Personal-Website/_next/static/css/1a1e386cf48fb5be.css","style",{"crossOrigin":""}]
0:["pFrwDLJKf7MyzqD6l7kl0",[[["",{"children":["(menu)",{"children":["projects",{"children":["1",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/Personal-Website/_next/static/css/1a1e386cf48fb5be.css","precedence":"next","crossOrigin":""}]],"$L4"]]]]
5:HL["/Personal-Website/_next/static/css/65aa3619a1925c9d.css","style",{"crossOrigin":""}]
6:I[4689,["326","static/chunks/326-d6fa33696876feca.js","185","static/chunks/app/layout-6b266942fd9f8a52.js"],""]
7:I[6954,[],""]
8:I[7264,[],""]
9:I[7250,["326","static/chunks/326-d6fa33696876feca.js","496","static/chunks/496-5894c08cc623828f.js","72","static/chunks/app/(menu)/layout-d8542be93bfa29ef.js"],""]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Fei - NYSeeNow"}],["$","meta","2",{"name":"description","content":"Generated by create next app"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","4",{"name":"next-size-adjust"}]]
3:[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_aa4d39 font-inter antialiased bg-white text-gray-900 tracking-tight","children":["$","div",null,{"className":"flex flex-col min-h-screen overflow-hidden supports-[overflow:clip]:overflow-clip","children":[["$","$L6",null,{}],["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":[null,["$","$L9",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(menu)","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(menu)","children","projects","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","(menu)","children","projects","children","1","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",["$","section",null,{"className":"bg-white py-12","children":["$","div",null,{"className":"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8","children":[["$","div",null,{"className":"mb-12 text-center","data-aos":"zoom-y-out","children":[["$","h1",null,{"className":"text-5xl font-bold text-gray-800","children":"NYSeeNow"}],["$","p",null,{"className":"mt-4 text-xl text-gray-600","children":"An innovative web and mobile application designed to transform the tourist experience in Manhattan, New York."}]]}],["$","div",null,{"id":"project-overview","className":"mb-12","children":[["$","h2",null,{"className":"text-3xl font-semibold text-gray-800","children":"Project Overview"}],["$","div",null,{"className":"mt-4","children":["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":"NYSeeNow is an innovative web and mobile application that empowers tourists and residents to navigate the vibrant attractions of Manhattan, New York, with ease. Our mission is to revolutionize the urban exploration experience by offering real-time predictions of venue busyness, enabling effective travel planning and congestion reduction at popular sites. Utilizing advanced machine learning algorithms and data mining techniques, we analyze vast datasets, including taxi and subway usage, along with weather patterns, to deliver precise busyness forecasts."}]}]]}],["$","div",null,{"id":"technology-stack","className":"mb-12","children":[["$","h2",null,{"className":"text-3xl font-semibold text-gray-800","children":"Technology Stack"}],["$","div",null,{"className":"mt-4","children":["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":[["$","strong",null,{"children":"Programming Languages: "}],"Java (back end), HTML/CSS/JavaScript (front end)and Python (machine learning and certain microservices).",["$","br",null,{}],["$","strong",null,{"children":"Frameworks and Libraries: "}],"Spring Boot (Java) for the primary back-end services and Flask (Python) for micro-services and ML interfacing. Hibernate is used to interact with the database. React.js was chosen as the Javascript library to develop the front end.",["$","br",null,{}],["$","strong",null,{"children":"Database: "}],"PostgreSQL.",["$","br",null,{}],["$","strong",null,{"children":"Hosting & Deployment: "}],"Docker for containerisation and deployment on the UCD (University College Dublin) server.",["$","br",null,{}],["$","strong",null,{"children":"Security & Authentication: "}],"Leveraging Spring Security, we ensured secure interactions, authorized API endpoints, verified logins with Form-based Authentication, and safeguarded passwords using BCrypt hashing.",["$","br",null,{}],["$","strong",null,{"children":"Testing: "}],"Our robust testing approach encompassed performance checks with Apache Bench and JMeter, security scans via OWASP ZAP and API evaluations using Postman."]}]}]]}],["$","div",null,{"id":"architecture","className":"mb-12","children":[["$","h2",null,{"className":"text-3xl font-semibold text-gray-800","children":"Archtecture"}],["$","div",null,{"className":"mt-4","children":[["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":"The application's backbone is a meticulously designed architecture encompassing five main components: the Front End, Back End, External APIs, a dedicated Flask ML (Machine Learning) Micro-service, and a robust DevOps pipeline."}],["$","img",null,{"src":"/Personal-Website/images/NYSEENOW1.png","alt":"NYSeeNow_Architecture","className":"w-fulL"}],["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":[["$","strong",null,{"children":"Front End "}],["$","br",null,{}],"The user’s primary touchpoint, it showcases information and captures inputs. It integrates with the Google Maps API for map services and communicates with the back end through RESTful APIs."]}],["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":[["$","strong",null,{"children":"Back End"}],["$","br",null,{}],"Developed using Java Spring Boot, it is the core of our application, managing logic and data. It splits into: ",["$","br",null,{}],"1. Business Layer: This is where our core application logic resides. It ensures that user requests are processed accurately and efficiently. ",["$","br",null,{}],"2. Persistence Layer: This layer acts as the bridge between our application and the database. The Persistence Layer leverages JPA (Java Persistence API) to manage data storage and retrieval, underpinned by Amazon RDS to guarantee data storage reliability and scalability."]}],["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":[["$","strong",null,{"children":"Flask ML Micro-service"}],["$","br",null,{}],"We harness a diverse array of data—from NYC taxi flows to real-time weather conditions—analyzed using sophisticated models to predict busyness accurately. The ML Micro-service was built using Flask. It exposes endpoints that the Spring Boot backend can call to get prediction data. The micro-service ensures that our ML operations are isolated from the main business logic, offering scalability and ease of updates."]}],["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":[["$","strong",null,{"children":"External APIs"}],["$","br",null,{}],"Our application benefits from data sourced from various external APIs. This data was initially scraped and stored in CSV(Comma-Separated Values) format, after which it was uploaded to the database."]}],["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":[["$","strong",null,{"children":"DevOps"}],["$","br",null,{}],"The development process started with writing followed by the testing of our code. Once ready for deployment, the application is dockerized and pushed to Docker Hub. For deployment, the image was pulled from Docker Hub and run on the target server, ensuring a consistent and isolated environment for our application. We used Nginx as a reverse proxy to manage traffic and have containerised components (front end, both back ends, and Nginx) for easier scalability and management."]}]]}]]}],["$","div",null,{"id":"features-and-functionality","className":"mb-12","children":[["$","h2",null,{"className":"text-3xl font-semibold text-gray-800","children":"Features and Functionality"}],["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":"The application required the following user-flows to incorporate features that met the expectations of the application:"}],["$","div",null,{"className":"mt-4","children":["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":[["$","strong",null,{"children":"Login & Register: "}]," To facilitate the retention and retrieval of created trips, the implementation of a user login feature becomes essential. This stems from the fact that trip data necessitates association with distinct users for storage purposes. To realise this objective, a Login and Register User-flow was devised. This user flow interfaces with the back end through the utilisation of RESTful API calls, effectively establishing the vital connection required to facilitate the secure saving and access of trip data under individual user contexts.",["$","br",null,{}],["$","strong",null,{"children":"Now Mode: "}]," The NowModeButton provides an interactive toggle for real-time busyness visualisation of NYC. Upon activation, it dynamically shifts its background to indicate the current mode and reveals the integrated WeatherCard, giving users a snapshot of the current weather. This combined visual experience, achieved through React’s state management, offers users both busyness and weather insights. The underlying heat map utilises React’s Google Maps API.",["$","br",null,{}],["$","strong",null,{"children":"Locator: "}],"The Locator feature is an integral component designed to provide users with optimal walking routes between selected attractions in NYC. By leveraging the Google Maps Directions Service, the Locator dynamically calculates and displays the most efficient walking path for a given set of attractions. The user flow involves selecting desired attractions, after which the Locator fetches the best route, highlighting it on the map. The route’s total walking time is also computed, offering users a comprehensive understanding of their journey. This feature is seamlessly integrated with the application’s context, ensuring a smooth and intuitive user experience. The Locator’s implementation is primarily in React, utilising the react-google-maps/API for map interactions and the Locator Context for state management.",["$","br",null,{}],["$","strong",null,{"children":"Trip Planner: "}]," One of the core features of the application was enabling users to plan a trip in advance. This is implemented by including the prediction data fetched from the machine learning models developed using NYC taxi and subway data sets. The user flow consists of three distinct page transitions and two interactions with the back-end via RESTful API calls. The user can select attractions from the home page map, define their trip’s start and end dates, and allocate specific visit days for each chosen attraction to fetch prediction data for all the attractions over each visit day."]}]}]]}],["$","div",null,{"id":"development-process","className":"mb-12","children":[["$","h2",null,{"className":"text-3xl font-semibold text-gray-800","children":"Development Process"}],["$","div",null,{"className":"mt-4","children":["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":"Our team consisted of six members, each assigned a specific lead role. The roles were: Data Lead, Coordination Lead, Front-End Code Lead, Customer Lead, Back-End Code Lead and Maintenance Lead. This structure allowed us to divide tasks effectively and ensure that all crucial aspects of the project are covered, from data analytics to front-end and back-end development, UI design and code quality assurance. Despite our defined roles, we actively engaged in diverse tasks to expand our skills and knowledge. To ensure effective communication and collaboration, we established clear communication rules, met regularly, used a 'feature-develop-main' branching strategy for code integration, and managed tasks via Trello. Decisions were typically made collaboratively during our meetings, with the lead of the relevant area having the final say."}]}]]}],["$","div",null,{"id":"my-role","className":"mb-12","children":[["$","h2",null,{"className":"text-3xl font-semibold text-gray-800","children":"My Role"}],["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":"As the Maintenance Lead in the project, my contributions were both technical and collaborative, ensuring the project’s successful execution. My primary role in the project was to ensure code quality and compatibility across all teams. However, my contributions weren’t confined to my primary role. I contributed to architecture design, API Design and Implementation, database management, server setup, deployment, and even front-end tasks."}],["$","div",null,{"className":"mt-4","children":["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":[["$","strong",null,{"children":"Architecture Design: "}],"I designed the structure for the entire project, ensuring smooth communication between all parts. See the architecture diagram.",["$","br",null,{}],["$","strong",null,{"children":"Code Quality Assurance: "}],"I instituted best practices for coding standards and version control, meticulously reviewed code for quality, and maintained thorough documentation to enhance understanding and collaboration across the team.",["$","br",null,{}],["$","strong",null,{"children":"Back-end Development/API Design and Implementation:"}],"I took charge of designing and implementing the API endpoints. Using the Java Spring Boot framework, I developed a range of APIs for various functions: ",["$","br",null,{}],"User Authentication: Created endpoints for user registration, login and password reset, integrating secure password hashing and session-based authentication. ",["$","br",null,{}],"User Profile: Developed endpoints to fetch user-specific information. ",["$","br",null,{}],"Trip Management: Designed APIs for trip list creation and deletion, fetching user-specific trip lists, and updating trips.",["$","br",null,{}],"Busyness Prediction: Designed and implemented Flask prediction API micro-service. It is connected with our prediction model to predict the busyness of attractions or itineraries and communicate with Spring Boot back end component.",["$","br",null,{}],["$","strong",null,{"children":"Database Management: "}],"I architected the database schema and managed the Amazon RDS instance, facilitating efficient data management.",["$","br",null,{}],["$","strong",null,{"children":"Server Setup and Configuration: "}],"I directed the deployment strategy, initially via Amazon EC2 using Jenkins for automatic CI/CD and subsequently through Docker on a UCD server, optimizing the application’s deployment process with a keen eye for security and efficiency. Nginx was used as a reverse proxy to route traffic to different back end services.",["$","br",null,{}],["$","strong",null,{"children":"Front-end Development: "}],"While my primary focus remained on back-end tasks, I also contribute to front-end development. I actively participated in crafting the user registration, reset functionalities, itinerary editing, and the update-delete features for the trip list."]}]}]]}],["$","div",null,{"id":"technical-challenges-and-solutions","className":"mb-12","children":[["$","h2",null,{"className":"text-3xl font-semibold text-gray-800","children":"Technical Challenges and Solutions"}],["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":"Throughout the project, I navigated numerous technical hurdles:"}],["$","div",null,{"className":"mt-4","children":["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":[["$","strong",null,{"children":"Security: "}],"The first challenge I met was the security issue. To ensure that only authorized users could access the critical components of the application, I implemented a Security Filter Chain using Spring Security to define access rules for various routes. Aware of the significant risks of storing passwords in plain text, I used Bcrypt for password hashing. I also implemented session-based authentication, which was essential for maintaining user states and managing resources.",["$","br",null,{}],["$","strong",null,{"children":"Deployment: "}],"Initially, we deployed our application across three separate EC2 servers. This approach proved to be inefficient, especially in setting up connections. To address these issues and optimize our deployment process, we shifted to using Docker. By containerizing each application components and using Docker networks, we established a more coherent connection between the containers and were able to host the entire application on a single server (UCD server). At the final stage of deployment, I encounter a new challenge with the UCD server only exposing port 80. So I decided to use Nginx to consolidate external access through a single port.",["$","br",null,{}],["$","strong",null,{"children":"Machine Learning Model Integration: "}],"Integrating the machine learning model into our Java back end posed compatibility problems since the models were in pickle format. I initially tried converting the pickle model to PMML, but this attempt proved unsuccessful. I then utilized Flask to integrate with prediction model and server it as an API microservice, ensuring smooth interaction with our back end.",["$","br",null,{}],["$","strong",null,{"children":"Code Compatibility and Quality: "}],"Ensuring code com- patibility and quality across different parts of the project was a constant challenge. As the Maintenance Lead, I reviewed the codebase regularly, identifying and addressing any compatibility issues, particularly during front end and back end integration process.",["$","br",null,{}]]}]}]]}],["$","div",null,{"id":"repository-information","className":"mb-12","children":[["$","h2",null,{"className":"text-3xl font-semibold text-gray-800","children":"Repository Information"}],["$","div",null,{"className":"mt-4","children":["$","p",null,{"className":"mt-2 text-gray-600 text-lg","children":["Frontend: https://github.com/Fei117117/NYSeeNow ",["$","br",null,{}],"Backend: https://github.com/Fei117117/NYSeeNow-backend ",["$","br",null,{}],"Micro-service: https://github.com/Fei117117/NYSeeNow-ML"]}]}]]}],["$","div",null,{"className":"text-center mt-12","children":["$","a",null,{"href":"/Personal-Website/projects","className":"text-blue-600 hover:underline text-lg","children":"← Back to Projects"}]}]]}]}],null],"segment":"__PAGE__"},"styles":[]}],"segment":"1"},"styles":[]}],"segment":"projects"},"styles":[]}],"params":{}}],null],"segment":"(menu)"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/Personal-Website/_next/static/css/65aa3619a1925c9d.css","precedence":"next","crossOrigin":""}]]}]]}]}]}],null]
a:null
