(()=>{var e={};e.id=199,e.ids=[199],e.modules={2934:e=>{"use strict";e.exports=require("next/dist/client/components/action-async-storage.external.js")},5403:e=>{"use strict";e.exports=require("next/dist/client/components/request-async-storage.external")},4580:e=>{"use strict";e.exports=require("next/dist/client/components/request-async-storage.external.js")},4749:e=>{"use strict";e.exports=require("next/dist/client/components/static-generation-async-storage.external")},5869:e=>{"use strict";e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},3597:(e,t,s)=>{"use strict";s.r(t),s.d(t,{GlobalError:()=>r.a,__next_app__:()=>p,originalPathname:()=>h,pages:()=>l,routeModule:()=>u,tree:()=>d});var a=s(7096),n=s(6132),i=s(7284),r=s.n(i),o=s(2564),c={};for(let e in o)0>["default","tree","pages","GlobalError","originalPathname","__next_app__","routeModule"].indexOf(e)&&(c[e]=()=>o[e]);s.d(t,c);let d=["",{children:["(menu)",{children:["projects",{children:["1",{children:["__PAGE__",{},{page:[()=>Promise.resolve().then(s.bind(s,1837)),"/Users/k/Desktop/Personal-Website-Dev/app/(menu)/projects/1/page.tsx"]}]},{}]},{}]},{layout:[()=>Promise.resolve().then(s.bind(s,1070)),"/Users/k/Desktop/Personal-Website-Dev/app/(menu)/layout.tsx"],"not-found":[()=>Promise.resolve().then(s.t.bind(s,9291,23)),"next/dist/client/components/not-found-error"]}]},{layout:[()=>Promise.resolve().then(s.bind(s,6580)),"/Users/k/Desktop/Personal-Website-Dev/app/layout.tsx"],"not-found":[()=>Promise.resolve().then(s.t.bind(s,9291,23)),"next/dist/client/components/not-found-error"]}],l=["/Users/k/Desktop/Personal-Website-Dev/app/(menu)/projects/1/page.tsx"],h="/(menu)/projects/1/page",p={require:s,loadChunk:()=>Promise.resolve()},u=new a.AppPageRouteModule({definition:{kind:n.x.APP_PAGE,page:"/(menu)/projects/1/page",pathname:"/projects/1",bundlePath:"",filename:"",appPaths:[]},userland:{loaderTree:d}})},785:(e,t,s)=>{Promise.resolve().then(s.t.bind(s,614,23))},1837:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>NYSeeNow,metadata:()=>r});var a=s(4656),n=s(4353),i=s.n(n);let r={title:"Fei - NYSeeNow"};function NYSeeNow(){return a.jsx("section",{className:"bg-white py-12",children:(0,a.jsxs)("div",{className:"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8",children:[(0,a.jsxs)("div",{className:"mb-12 text-center","data-aos":"zoom-y-out",children:[a.jsx("h1",{className:"text-5xl font-bold text-gray-800",children:"NYSeeNow"}),a.jsx("p",{className:"mt-4 text-xl text-gray-600",children:"An innovative web and mobile application designed to transform the tourist experience in Manhattan, New York."})]}),(0,a.jsxs)("div",{id:"introduction",className:"mb-12",children:[a.jsx("h2",{className:"text-3xl font-semibold text-gray-800",children:"INTRODUCTION"}),a.jsx("div",{className:"mt-4",children:a.jsx("p",{className:"mt-2 text-gray-600 text-lg",children:"NYSeeNow is a web and mobile application that aides tourists or residents navigate the bustling attractions in Manhattan, New York. We aid the user by providing accurate real-time busyness predictions. The objectives of this project are to enhance the overall tourist experience, optimise travel planning, and alleviate congestion at popular attractions. To achieve these goals, we adopted a combination of methodologies such as machine learning algorithms, data mining techniques, and more to analyse and utilise taxi and subway data, weather conditions, and other factors, in order to accurately calculate and predict busyness. While developing the application, we focused on a user-centric design, incorporating several UX design principles. The project was developed by a six-member team who used the scrum methodology to manage the development process. The key findings of this project demonstrate that NYSeeNow successfully predicts the busyness of Manhattan’s tourist attractions, enabling users to plan their visits strategically and optimise their stay in Manhattan. The application’s seamless integration of data science and pertinent information provides tourists with personalised itineraries and insights, enhancing their overall experience in the city."})})]}),(0,a.jsxs)("div",{id:"overall-architecture-and-design",className:"mb-12",children:[a.jsx("h2",{className:"text-3xl font-semibold text-gray-800",children:"OVERALL ARCHITECTURE AND DESIGN"}),(0,a.jsxs)("div",{className:"mt-4",children:[a.jsx("p",{className:"mt-2 text-gray-600 text-lg",children:"The architecture of our application is composed of five main components: Front end, Back end, External APIs, Flask ML(Machine Learning) Micro-service, and DevOps."}),a.jsx("img",{src:"/Personal-Website/images/NYSEENOW1.png",alt:"NYSeeNow_Architecture",className:"w-fulL"}),a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"Front End"}),a.jsx("p",{className:"mt-2 text-gray-600 text-lg",children:"The user’s primary touchpoint, it showcases information and captures inputs. It integrates with the Google Maps API for map services and communicates with the backend through RESTful APIs."}),a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"Back End"}),(0,a.jsxs)("p",{className:"mt-2 text-gray-600 text-lg",children:["Developed using Java Spring Boot, it is the core of our application, managing logic and data. It splits into: ",a.jsx("br",{}),a.jsx("strong",{children:"Business Layer:"})," This is where our core application logic resides. It ensures that user requests are processed accurately and efficiently. ",a.jsx("br",{}),a.jsx("strong",{children:"Persistence Layer:"}),"This layer acts as the bridge be- tween our application and the database. The Persistence Layer leverages JPA (Java Persistence API) to manage data storage and retrieval.",a.jsx("br",{}),"Amazon RDS is our chosen platform for data storage. It offers reliability, scalability, and seamless integration with our back end."]}),a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"Flask ML Microservice"}),a.jsx("p",{className:"mt-2 text-gray-600 text-lg",children:"The ML Micro-service was built using Flask. It exposes endpoints that the Spring Boot backend can call to get prediction data. The micro-service ensures that our ML operations are isolated from the main business logic, offering scalability and ease of updates."}),a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"External APIs"}),a.jsx("p",{className:"mt-2 text-gray-600 text-lg",children:"Our application benefits from data sourced from various external APIs. This data was initially scraped and stored in CSV(Comma-Separated Values) format, after which it was uploaded to the database."}),a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"DevOps"}),a.jsx("p",{className:"mt-2 text-gray-600 text-lg",children:"The development process started with writing followed by the testing of our code. Once ready for deployment, the application is dockerized and pushed to Docker Hub. For deployment, the image was pulled from Docker Hub and run on the target server, ensuring a consistent and isolated environment for our application. We used Nginx as a reverse proxy to manage traffic and have containerised components (front end, both back ends, and Nginx) for easier scalability and management."})]})]}),(0,a.jsxs)("div",{id:"back-end",className:"mb-12",children:[a.jsx("h2",{className:"text-3xl font-semibold text-gray-800",children:"BACK-END"}),(0,a.jsxs)("div",{className:"mt-4",children:[a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"Technologies, Libraries and Frameworks"}),(0,a.jsxs)("p",{className:"mt-2 text-gray-600 text-lg",children:["Our application was constructed using the following tools:",a.jsx("br",{}),a.jsx("strong",{children:"Programming Languages:"})," Java (back end) and Python (machine learning and certain micro-services).",a.jsx("br",{}),a.jsx("strong",{children:"Frameworks:"})," Spring Boot (Java) for the primary back-end services and Flask (Python) for lightweight services and ML interfacing.",a.jsx("br",{})," ",a.jsx("strong",{children:"Database:"})," PostgreSQL, a robust database system.",a.jsx("br",{})," ",a.jsx("strong",{children:"Hosting & Deployment:"})," Docker for containerisation and deployment on the UCD(University College Dublin) server.",a.jsx("br",{})," ",a.jsx("strong",{children:"Security & Authentication:"})," Leveraging Spring Security, we ensured secure interactions, authorized API endpoints, verified logins with Form-based Authentication, and safeguarded passwords using BCrypt hashing.",a.jsx("br",{})," ",a.jsx("strong",{children:"Testing:"})," Our robust testing approach encompassed performance checks with Apache Bench and JMeter, security scans via OWASP ZAP and API evaluations using Postman."]}),a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"API Endpoints"}),(0,a.jsxs)("p",{className:"mt-2 text-gray-600 text-lg",children:[a.jsx("strong",{children:"User Authentication:"})," Dedicated endpoints for user registration, login, and password reset. These endpoints incorporate secure password hashing and session-based authentication mechanisms.",a.jsx("br",{}),a.jsx("strong",{children:"User Profile:"})," Fetching user-specific data.",a.jsx("br",{})," ",a.jsx("strong",{children:"Attraction Details:"})," Retrieve comprehensive details about various attractions.",a.jsx("br",{})," ",a.jsx("strong",{children:"Trip Management:"})," Endpoints for creating, updating, fetching, and deleting user-specific trip lists.",a.jsx("br",{})," ",a.jsx("strong",{children:"Busyness Prediction:"})," A specialised Flask microservice interfaces with our prediction model, estimating the busyness of attractions and itineraries."]}),a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"Data Entities"}),(0,a.jsxs)("p",{className:"mt-2 text-gray-600 text-lg",children:[a.jsx("strong",{children:"Attraction:"}),"Represents user-planned trips.",a.jsx("br",{}),a.jsx("strong",{children:"Trip:"})," Fetching user-specific data.",a.jsx("br",{})," ",a.jsx("strong",{children:"TripAttraction:"})," A bridge linking trips with the attractions they include.",a.jsx("br",{})," ",a.jsx("strong",{children:"UserAccount:"})," Retains information about registered users."]})]})]}),(0,a.jsxs)("div",{id:"front-end",className:"mb-12",children:[a.jsx("h2",{className:"text-3xl font-semibold text-gray-800",children:"FRONT-END"}),(0,a.jsxs)("div",{className:"mt-4",children:[a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"Technologies, Libraries and Frameworks"}),(0,a.jsxs)("p",{className:"mt-2 text-gray-600 text-lg",children:[a.jsx("strong",{children:"React.js:"})," React.js was chosen as the Javascript library to develop the front end based on several important factors.",a.jsx("br",{}),a.jsx("strong",{children:"Create React App:"})," The development tool that utilised React.js for the development of the application was _Create React App_ (CRA). Using CRA, initiating, configuring, and launching the React.js application was streamlined. The toolkit of CRA includes _Babel_ and _Webpack_, which facilitate the efficient transformation of code, its consolidation, and subsequent optimisation. CRA is therefore suitable for both novices and seasoned developers, as it offers an avenue for prototyping, coding, and releasing single-page applications, websites, and even multifaceted web-based systems."]}),a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"User-flows and Features"}),a.jsx("p",{className:"mt-2 text-gray-600 text-lg",children:"The application required the following user-flows to incorporate features that met the expectations of the application:"}),(0,a.jsxs)("p",{className:"mt-2 text-gray-600 text-lg",children:[a.jsx("strong",{children:"Login & Register:"})," To facilitate the retention and retrieval of created trips, the implementation of a user login feature becomes essential. This stems from the fact that trip data necessitates association with distinct users for storage purposes. To realize this objective, a Login and Register User-flow was devised. This user flow interfaces with the back end through the utilisation of RESTful API calls, effectively establishing the vital connection required to facilitate the secure saving and access of trip data under individual user contexts.",a.jsx("br",{}),a.jsx("strong",{children:"Now Mode:"})," The NowModeButton provides an interactive toggle for real-time busyness visualisation of NYC. Upon activation, it dynamically shifts its background to indicate the current mode and reveals the integrated WeatherCard, giving users a snapshot of the current weather. This combined visual experience, achieved through React’s state management, offers users both busyness and weather insights. The underlying heat map utilizes React’s Google Maps API.",a.jsx("br",{})," ",a.jsx("strong",{children:"Locator:"})," The Locator feature is an integral component designed to provide users with optimal walking routes between selected attractions in NYC. By leveraging the Google Maps Directions Service, the Locator dynamically calculates and displays the most efficient walking path for a given set of attractions. The user flow involves selecting desired attractions, after which the Locator fetches the best route, highlighting it on the map. The route’s total walking time is also computed, offering users a comprehensive understanding of their journey. This feature is seamlessly integrated with the application’s context, ensuring a smooth and intuitive user experience. The Locator’s implementation is primarily in React, utilizing the react-google-maps/API for map interactions and the Locator Context for state management.",a.jsx("br",{})," ",a.jsx("strong",{children:"Trip Planner:"}),"One of the core features of the application was enabling users to plan a trip in advance. This is implemented by including the prediction data fetched from the machine learning models developed using NYC taxi and subway data sets. The user flow consists of three distinct page transitions and two interactions with the back-end via RESTful API calls. The user can select attractions from the home page map, define their trip’s start and end dates, and allocate specific visit days for each chosen attraction to fetch prediction data for all the attractions over each visit day."]})]})]}),(0,a.jsxs)("div",{id:"data-analytics-and-visualization",className:"mb-12",children:[a.jsx("h2",{className:"text-3xl font-semibold text-gray-800",children:"DATA ANALYTICS AND VISUALIZATION"}),(0,a.jsxs)("div",{className:"mt-4",children:[a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"Data Sets"}),a.jsx("p",{className:"mt-2 text-gray-600 text-lg",children:"We gathered the following data sets in order to predict busyness at Manhattan’s attractions:"}),(0,a.jsxs)("p",{className:"mt-2 text-gray-600 text-lg",children:[a.jsx("strong",{children:"NYC Yellow Taxi Data:"})," The 2019 NYC Taxi database contains around 68 million taxicab trip records. The records include the following fea- tures: pick-up time, drop-off time, pickup region, drop-off region, trip distance etc.",a.jsx("br",{}),a.jsx("strong",{children:"NYC Overpass Turbo Data:"})," Overpass Turbo, a powerful tool for extracting Open- StreetMap data, was used to create a query to retrieve information about tourist-centric attractions in Manhattan. This query directed the extraction of data on tourism-related nodes, paths, and relationships within Manhattan. This was used by the front end to display all of the relevant tourist locations in Manhattan.",a.jsx("br",{}),a.jsx("strong",{children:"NYC Subway Turnstile Data:"})," We utilized three different data sets to compile the subway data. The first data set contained the turnstile usage statistics for NYC subway stations which are provided by the NYC Metropolitan Transportation Authority (MTA). The follow- ing details are included in the value records every four hours: station-ID, turnstile-ID, record time, entry value, exit value, etc. The second data set contained all of the station names and coordinates of the stations in the turnstile data, and was also provided by the MTA. Finally, we found a lookup table to map the turnstile data to each station, on GitHub.",a.jsx("br",{}),a.jsx("strong",{children:"2019 OpenWeather Data:"})," We queried OpenWeather’s OneCall API to obtain every hour of weather data in 2019. This data set included important features such as temperature, rain and snow fall, allowing us to determine if the weather has an effect on attraction busyness.",a.jsx("br",{}),a.jsx("strong",{children:"BestTime API:"})," BestTime API is a data service that forecasts how busy a business is at a given hour of the week using foot traffic data gained from anonymous phone signals. It returns busyness data as a percentage. We queried BestTime API to collect busyness data on locations in Manhattan, resulting in busy- ness predictions for every hour in the week for more than 170 attractions."]}),a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"Algorithms and Models"}),(0,a.jsxs)("p",{className:"mt-2 text-gray-600 text-lg",children:[a.jsx("strong",{children:"Taxi Model:"})," This model focuses on predicting busyness based on taxi drop-off data. It involves forecasting passenger counts and calculating a relative busyness metric. The use of Random Forest models seems apt due to its proficiency with categorical features.",a.jsx("br",{}),a.jsx("strong",{children:"Subway Model:"})," This integrates subway and weather data to predict busyness. The adoption of the Weibull Min distribution for better representing the data and refining the model with Random Forest regressors demonstrates a thoughtful approach to achieving accurate predictions."]})]})]}),(0,a.jsxs)("div",{id:"my-role",className:"mb-12",children:[a.jsx("h2",{className:"text-3xl font-semibold text-gray-800",children:"MY ROLE"}),a.jsx("p",{className:"mt-2 text-gray-600 text-lg",children:"As the Maintenance Lead in the project, my contributions were both technical and collaborative, ensuring the project’s successful execution. My primary role in the project was to ensure code quality and compatibility across all teams. However, my contributions weren’t confined to my primary role. I contributed to architecture design, API Design and Implementation, database management, server setup, deploy- ment, and even front-end tasks."}),(0,a.jsxs)("div",{className:"mt-4",children:[a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"Technical Contributions"}),(0,a.jsxs)("p",{className:"mt-2 text-gray-600 text-lg",children:[a.jsx("strong",{children:"Architecture Design:"})," I designed the structure for the entire project, ensuring smooth communication between all parts. See the architec- ture diagram.",a.jsx("br",{}),a.jsx("strong",{children:"Code Quality Assurance:"})," I prioritized various aspects to ensure the highest standards of code quality: ",a.jsx("br",{}),"Establishing Coding Practices: I established good practices for version control. I set up the feature-develop-main branching strategy, moving features from individual branches to development and finally to the main branch after testing. ",a.jsx("br",{})," Ensuring Code Compatibility: I played a key role in ensuring that our code was compatible across different parts of the project. By consistently reviewing team code and addressing compatibility issues, I ensured seamless interaction between our front-end, back-end, and machine learning components. ",a.jsx("br",{})," Code Cleanliness and Documentation: I consistently cleaned up the codebase to make it easier to read and work with. Additionally, I inserted comments to ensure that the code remained understandable for all members of the team. ",a.jsx("br",{}),"Conducting Code Reviews: Reviewed code regularly to identify potential bugs, logic flaws, or security risks, ensuring robustness and reliability of the code.",a.jsx("br",{}),a.jsx("strong",{children:"Back-end Development/API Design and Implementation:"}),"I took charge of designing and implementing the API endpoints. Using the Java Spring Boot framework, I developed a range of APIs for various functions: ",a.jsx("br",{}),"User Authentication: Created endpoints for user registration, login and password reset, integrating secure password hashing and session-based authentication. ",a.jsx("br",{}),"User Profile: Developed endpoints to fetch user-specific information. ",a.jsx("br",{}),"Trip Management: Designed APIs for trip list creation and deletion, fetching user-specific trip lists, and updating trips."," ",a.jsx("br",{}),"Busyness Prediction: Designed and implemented Flask prediction API micro-service. It is connected with our prediction model to predict the busyness of attractions or itineraries and communicate with Spring Boot back end component.",a.jsx("br",{}),a.jsx("strong",{children:"Database Management:"})," Another major responsibility of mine was managing the project’s database. I set up an Amazon RDS database instance for scalable and reliable data storage. The front-end lead and I designed a comprehensive database schema that included tables for trips, attractions, and trip-attraction associations. I implemented this schema in PostgreSQL, ensuring efficient storage and retrieval of application data. I also designed a user account database schema for the user login, register and reset password feature. To enhance database operations and simplify table creations, I integrated JPA for effective object-relational mapping and streamlined CRUD functionalities.",a.jsx("br",{}),a.jsx("strong",{children:"Server Setup and Configuration:"})," I implemented dual deployment strategies, using both Ama- zon EC2 and the UCD server. On EC2, I configured Jenkins with a personal access token for GitHub integration, enabling automatic CI/CD whenever code changes occurred. After successfully deploying using EC2 and Jenkins, I then set up the server provided by the university. Docker was installed on UCD server, preparing it for the next phase of deployment.",a.jsx("br",{}),a.jsx("strong",{children:"Deployment:"})," I played a critical role in deploying our application. Initially, I utilized three EC2 servers with Jenkins, each assigned to handle the back end, front end, and Flask micro-service components. This approach proved to be inefficient, especially in setting up connections. To optimize deployment, I collaborated closely with the front-end code lead. Together, we decided to leverage Docker to containerize our application, enhancing its deployment efficiency. During the final phase of deployment, I decided to use Nginx as a reverse proxy to route traffic to different back end services while exposing only port 80 for the front end. With Nginx, we can effectively test and use our Spring Boot and Flask back ends without exposing their specific ports to the external world. So I built separate Docker images for each part (front end, Spring Boot back end, Flask back end) and a fourth Docker image for Nginx. This setup ensures that each component of our application (including the reverse proxy) is containerized, making it easier to manage, scale, or replace parts of your infrastructure as needed.",a.jsx("br",{}),a.jsx("strong",{children:"Front-end Development:"})," While my primary focus remained on back-end tasks, I also contribute to front-end development. I actively participated in crafting the user registration, reset functionalities, itinerary editing, and the update-delete features for the trip list."]}),a.jsx("h3",{className:"text-2xl text-gray-700 font-medium",children:"Teamwork Contribution"}),a.jsx("p",{className:"mt-2 text-gray-600 text-lg",children:"As a member of the project team, I made several valuable contributions:"}),(0,a.jsxs)("p",{className:"mt-2 text-gray-600 text-lg",children:[a.jsx("strong",{children:"Feature Ideas:"})," At the start of our project, I was actively involved in brainstorming sessions. I helped to come up with creative ideas for application features.",a.jsx("br",{}),a.jsx("strong",{children:"Active Participation in Meetings:"})," Throughout the project, I consistently attended group meetings to share my progress, raise any issues I encountered, and discuss potential solutions. I also contributed to the planning of our next steps, ensuring that our team stayed on track towards our project goals.",a.jsx("strong",{children:"Collaboration with Front-end Team:"})," I collaborated closely with the front-end team to ensure a smooth connection between the front end and back end component. For example, I worked with the front-end Code Lead to design the API endpoints, which involved aligning on data request and response formats. We also collaborated to resolve Cross-Origin Resource Sharing (CORS) issues, which were crucial for the front-end application to make requests to our back-end server.",a.jsx("br",{}),a.jsx("strong",{children:"Collaboration with Data Team:"})," I also collaborated closely with the Data team to ensure an effective integration of our prediction model. This involved setting up a Flask API endpoint that utilize the model and transmitted prediction data to Spring Boot back end.",a.jsx("br",{}),a.jsx("strong",{children:"Problem-solving:"})," My assistance extended beyond my primary duties. I often found myself assisting team members in troubleshooting issues and resolving technical errors. I also wrote detailed guidelines to help the team set up and run both back-end and Flask codes locally."]})]})]}),a.jsx("div",{className:"text-center mt-12",children:a.jsx(i(),{href:"/projects",passHref:!0,children:a.jsx("a",{className:"text-blue-600 hover:underline text-lg",children:"← Back to Projects"})})})]})})}},2300:(e,t,s)=>{"use strict";let{createProxy:a}=s(5153);e.exports=a("/Users/k/Desktop/Personal-Website-Dev/node_modules/next/dist/client/link.js")},4353:(e,t,s)=>{"use strict";e.exports=s(2300)}};var t=require("../../../../webpack-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),s=t.X(0,[612,365,382,701,573],()=>__webpack_exec__(3597));module.exports=s})();